#readr::write_tsv(x = dplyr::filter(output_cqdata, Sample == n_samples[i]), path = file.path(getwd(), n_samples[i]), col_names = FALSE)
readr::write_tsv(x = fullplate_df, path = file.path(getwd(), n_samples[i]), col_names = FALSE)
}
fullplate_df <- tibble("Position" = dplyr::filter(df_samples, Sample == n_samples[i]) %>% dplyr::select(Position)$Position)
for(i in 1:length(n_samples))
{
fullplate_df <- NULL
fullplate_df <- tibble("Position" = dplyr::filter(df_samples, Sample == n_samples[i]) %>% dplyr::select(Position)$Position)
fullplate_df <- dplyr::left_join(fullplate_df, dplyr::filter(output_cqdata, Sample == n_samples[i]))
#fullplate_df <- dplyr::filter(output_cqdata, Sample == n_samples[i]) %>% dplyr::arrange(Type)
pos <- dplyr::filter(df_samples, Sample == n_samples[1]) %>% dplyr::select( Position)
fullplate_df$Position <- pos$Position
# fullplate_df <- dplyr::full_join(fullplate_df, dplyr::select(df_samples, Position), by= "Position")
fullplate_df <- dplyr::arrange(fullplate_df,Type)
#readr::write_tsv(x = dplyr::filter(output_cqdata, Sample == n_samples[i]), path = file.path(getwd(), n_samples[i]), col_names = FALSE)
readr::write_tsv(x = fullplate_df, path = file.path(getwd(), n_samples[i]), col_names = FALSE)
}
for(i in 1:length(n_samples))
{
fullplate_df <- NULL
pos1 <- dplyr::filter(df_samples, Sample == n_samples[i]) %>% dplyr::select( Position)
fullplate_df <- tibble("Position" = pos1)
fullplate_df <- dplyr::left_join(fullplate_df, dplyr::filter(output_cqdata, Sample == n_samples[i]))
#fullplate_df <- dplyr::filter(output_cqdata, Sample == n_samples[i]) %>% dplyr::arrange(Type)
pos <- dplyr::filter(df_samples, Sample == n_samples[1]) %>% dplyr::select( Position)
fullplate_df$Position <- pos$Position
# fullplate_df <- dplyr::full_join(fullplate_df, dplyr::select(df_samples, Position), by= "Position")
fullplate_df <- dplyr::arrange(fullplate_df,Type)
#readr::write_tsv(x = dplyr::filter(output_cqdata, Sample == n_samples[i]), path = file.path(getwd(), n_samples[i]), col_names = FALSE)
readr::write_tsv(x = fullplate_df, path = file.path(getwd(), n_samples[i]), col_names = FALSE)
}
for(i in 1:length(n_samples))
{
fullplate_df <- NULL
pos1 <- dplyr::filter(df_samples, Sample == n_samples[i]) %>% dplyr::select( Position)
fullplate_df <- tibble("Position" = pos1$Position)
fullplate_df <- dplyr::left_join(fullplate_df, dplyr::filter(output_cqdata, Sample == n_samples[i]))
#fullplate_df <- dplyr::filter(output_cqdata, Sample == n_samples[i]) %>% dplyr::arrange(Type)
pos <- dplyr::filter(df_samples, Sample == n_samples[1]) %>% dplyr::select( Position)
fullplate_df$Position <- pos$Position
# fullplate_df <- dplyr::full_join(fullplate_df, dplyr::select(df_samples, Position), by= "Position")
fullplate_df <- dplyr::arrange(fullplate_df,Type)
#readr::write_tsv(x = dplyr::filter(output_cqdata, Sample == n_samples[i]), path = file.path(getwd(), n_samples[i]), col_names = FALSE)
readr::write_tsv(x = fullplate_df, path = file.path(getwd(), n_samples[i]), col_names = FALSE)
}
n_features <- dplyr::filter(df_samples, Sample == n_samples[1]) %>% dplyr::select( Position)
for(i in 1:length(n_samples))
{
fullplate_df <- NULL
pos1 <- dplyr::filter(df_samples, Sample == n_samples[i]) %>% dplyr::select( Position)
fullplate_df <- tibble("Position" = pos1$Position)
fullplate_df <- dplyr::left_join(fullplate_df, dplyr::filter(output_cqdata, Sample == n_samples[i]))
#fullplate_df <- dplyr::filter(output_cqdata, Sample == n_samples[i]) %>% dplyr::arrange(Type)
pos <- dplyr::filter(df_samples, Sample == n_samples[1]) %>% dplyr::select( Position)
fullplate_df$Position <- pos$Position
# fullplate_df <- dplyr::full_join(fullplate_df, dplyr::select(df_samples, Position), by= "Position")
fullplate_df <- dplyr::arrange(fullplate_df,Type)
#readr::write_tsv(x = dplyr::filter(output_cqdata, Sample == n_samples[i]), path = file.path(getwd(), n_samples[i]), col_names = FALSE)
readr::write_tsv(x = fullplate_df, path = file.path(getwd(), n_samples[i]), col_names = FALSE)
}
n_features <- nrow(dplyr::filter(df_samples, Sample == n_samples[1]) %>% dplyr::select( Position))
n_features
qPCRraw <- HTqPCR::readCtData(files = n_samples, path=getwd(), column.info = list("position" = 1,"feature" = 2,"Ct" = 4, "type"=5), n.features = n_features)
plotCtOverview(qPCRraw, genes = unique(df_samples$Type), groups = sampleNames(qPCRraw) , conf.int = TRUE)
plotCtCard(qPCRraw, col.range = c(10, 35), well.size = 2)
raw.mix <- qPCRraw
plotCtVariation(raw.mix, variation = "sd", log = TRUE, main = "SD of replicated features", col = "lightgrey")
raw.variation <- plotCtVariation(raw.mix, type = "detail", add.featurenames = TRUE, pch = " ", cex = 1.2)
raw.cat <- qPCRraw
plotCtCategory(raw.cat)
plotCtCategory(raw.cat, stratify = "class")
plotCtCategory(raw.cat, by.feature = TRUE, cexRow = 0.1)
featureClass(qPCRraw)
featureCategory(qPCRraw)
?normalizeCtData
featureType(qPCRraw)
g.norm <- normalizeCtData(qPCRraw, norm = "geometric.mean")
g.norm <- normalizeCtData(qPCRraw, norm = "deltaCT", Ct.max = 35, deltaCt.genes)
g.norm <- normalizeCtData(qPCRraw, norm = "deltaCt", Ct.max = 35, deltaCt.genes)
g.norm <- normalizeCtData(qPCRraw, norm = "deltaCt", Ct.max = 35)
g.norm <- normalizeCtData(qPCRraw, norm = "deltaCt", Ct.max = 35, deltaCt.genes = "GAPDH")
g.norm <- normalizeCtData(qPCRraw, norm = "deltaCt", Ct.max = 35, deltaCt.genes = c("GAPDH","PGK1"))
g.norm
plot(exprs(qPCRraw), exprs(q.norm), pch = 20, main = "Quantile normalisation", col = rep(brewer.pal(6, "Spectral"), each = 384))
plot(exprs(qPCRraw), exprs(g.norm), pch = 20, main = "deltaCT normalisation", col = rep(brewer.pal(6, "Spectral"), each = 384))
plot(exprs(qPCRraw), exprs(g.norm), pch = 20, main = "deltaCT normalisation", col = rep(brewer.pal(6, "Spectral"), each = 96))
plotCtCor(qPCRraw, main = "Ct correlation")
plotCtCor(g.norm, main = "Ct correlation")
plotCtOverview(g.norm, genes = unique(df_samples$Type), groups = sampleNames(qPCRraw) , conf.int = TRUE)
plotCtDensity(g.norm)
plotCtBoxes(g.norm, stratify = "class")
plotCtBoxes(g.norm)
plotCtScatter(sr.norm, cards = c(1, 2), col = "type", diag = TRUE)
plotCtScatter(g.norm, cards = c(1, 2), col = "type", diag = TRUE)
plotCtScatter(g.norm, cards = c(1, 3), col = "type", diag = TRUE)
plotCtPairs(g.norm, col = "type", diag = TRUE)
plotCtPCA(qPCRraw)
clusterCt(g.norm, type = "samples")
clusterCt(g.norm, type = "genes")
plotCtHeatmap(qPCRraw, gene.names = "", dist = "euclidean")
plotCtHeatmap(g.norm, gene.names = "", dist = "euclidean")
library(shiny)
library(shinydashboard)
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
# Path yo XLS and assay files
path <- "/Users/janwinter/OneDrive/PhD/Followup/Results/Luciferase/Assays/2016-12-03_HEKTCF-HCT116_Luc-check/"
# Name of XLS sheet
excel.sheet <- file.path(path,"2016-12-03_HEKTCF-HCT116.xlsx")
# Name of Assay files
## Must be named like:
## NAME_PlateX-RLUC/FLUC
# Will be automatically read according to the entry in the XLS sheet
name <- "20161205_Hek293-HCT116"
# Median normalization?
normalize = FALSE
library(openxlsx)
library(reshape2)
library(dplyr)
library(highcharter)
# Get XLS File
knitr::opts_chunk$set(root.dir = path)
# Open XLSX File
## File is structured in the following way
## Worksheets:  Protocol (contains Aim, FLUC, RLUC, Treatment)
##              Sheet1 (Sheet2 etc.) containing the 96 well plate as plate format, 1-12 in rows A-H, which needs to be pared into a data frame
workbook <- openxlsx::loadWorkbook(excel.sheet,xlsxFile = NULL)
wb_names <- names(workbook)
# Get Protocol
protocols <- openxlsx::read.xlsx(xlsxFile = excel.sheet, sheet = "Protocol", colNames = FALSE, rowNames = FALSE)
protocol <- protocols[,2]
names(protocol) <- protocols[,1]
# Get Sheets
plates <- list()
groups <- NA
## check if multiple
for(i in 2:length(wb_names))
{
if(grepl(pattern = "Plate.+", x=wb_names[i]) )
{
plates[[wb_names[i]]]$layout <- as.data.frame(openxlsx::read.xlsx(xlsxFile = excel.sheet, sheet = wb_names[i], colNames = TRUE, rowNames = TRUE), stringsAsFactors=FALSE)
plates[[wb_names[i]]]$shape <- reshape2::melt(as.matrix(plates[[wb_names[i]]]$layout))
pattern <- expression("^(\\d{1})$")
plates[[wb_names[i]]]$shape$Var2 <- sub(pattern = pattern, replacement = paste("0","\\1", sep=""), x=  plates[[wb_names[i]]]$shape$Var2, fixed = FALSE )
plates[[wb_names[i]]]$shape$position <- paste0(plates[[wb_names[i]]]$shape$Var1, plates[[wb_names[i]]]$shape$Var2)
# set treatment groups
groups <- c(groups, as.character(plates[[wb_names[i]]]$shape$value))
}
}
# Now we make treatment groups in list
## They will be used for plotting later, NA are wells that will not be used for anything later on
groups <- unique(groups) # might be used later
# according to tidyverse, data will be kept like that:
## Column1: treatment
## Column2: FLUC signal
## Column3: RLUC signal
# We achieve this by loading the data, parsing the position as plate X at well A12 and putting it together with the treatment in the row.
# this rrequires that FLUC and RLUC signals of the same plate are in the same dataframe
data <- as.list(names(plates))
names(data) <- names(plates)
library(readr)
for(i in 1:length(data))
{
# FLUC
data[[i]]$FLUC <- readr::read_tsv(file = file.path(path,paste(name,"_",names(data)[i],"-FLUC.TXT", sep="")), col_names=FALSE, quoted_na = FALSE)
colnames(data[[i]]$FLUC) <- c("Plate", "Well", "FLUC")
data[[i]]$FLUC$Plate <- NULL
# RLUC
data[[i]]$RLUC <- readr::read_tsv(file = file.path(path,paste(name,"_",names(data)[i],"-RLUC.TXT", sep="")), col_names=FALSE, quoted_na = FALSE)
colnames(data[[i]]$RLUC) <- c("Plate", "Well", "RLUC")
data[[i]]$RLUC$Plate <- NULL
# Combine them in one
data[[i]]$ALL <- dplyr::inner_join(data[[i]]$FLUC, data[[i]]$RLUC, by="Well")
data[[i]]$ALL$Plate <- paste("Plate",i,sep="")
# Median normaliziation
if(normalize){
data[[i]]$ALL$FLUC <- data[[i]]$ALL$FLUC/ median(data[[i]]$ALL$FLUC, na.rm = TRUE)
data[[i]]$ALL$RLUC <- data[[i]]$ALL$RLUC/ median(data[[i]]$ALL$RLUC, na.rm = TRUE)
}
# Add the treatment to it
data[[i]]$ALL$Treatment <- sapply(data[[i]]$ALL$Well, function(x){
# Get treatment for same plate from plates$Plate1$[plates$Plate1$$position == x , "value"]
return(as.character(plates[[names(data)[i]]]$shape[plates[[names(data)[i]]]$shape$position == as.character(x),"value"]))
})
# Remove NA
data[[i]]$ALL <- dplyr::filter(data[[i]]$ALL, !is.na(Treatment))
# Create Platemap
data[[i]]$platemap <- dplyr::mutate(as.data.frame(data[[i]]$ALL),
Row=as.numeric(match(toupper(substr(Well, 1, 1)), LETTERS)),
Column=as.numeric(substr(Well, 2, 5)))
}
# Now we have all data in
# data$PLATEX#ALL in a row-based tidyverse compatible system
## Aim: Merge all to have a single tbl
plot <- list()
# store in plot$data
for(i in 1:length(data))
{
if(i==1)
{
# create tbl
plot$data <- tibble::tibble("Plate" = data[[i]]$ALL$Plate,
"Treatment" = data[[i]]$ALL$Treatment,
"FLUC" = data[[i]]$ALL$FLUC,
"RLUC" = data[[i]]$ALL$RLUC,
"Well" = data[[i]]$ALL$Well,
"FLUC.median" = NA,
"FLUC.mean" = NA,
"FLUC.sd" = NA,
"RLUC.median" = NA,
"RLUC.mean" = NA,
"RLUC.sd" = NA
)
}
else{
# Add rows of other datasets
plot$data <- dplyr::bind_rows(plot$data, data[[i]]$ALL[,c("Plate", "Treatment", "FLUC", "RLUC", "Well")])
}
}
## Normalize: FLUC / RLUC
plot$data$Divided <- plot$data$FLUC/plot$data$RLUC
## Transform to log2
plot$data$Log2 <- log2(plot$data$Divided)
# Transform Inf and -Inf to NA
plot$data$Divided <- sapply(plot$data$Divided, function(x){
if(is.infinite(x) || is.nan(x)){
return(NA)
} else {
return(x)
}
})
plot$data$Log2 <- sapply(plot$data$Log2, function(x){
if(is.infinite(x) || is.nan(x)){
return(NA)
} else {
return(x)
}
})
plot$data
plates <- unique(plot$data$Plate)
treatments <- unique(plot$data$Treatment)
treatments
i =1
i=1
dplyr::filter(plot$data, Plate == plates[i]) %>% dplyr::filter(Treatment %in% treatments)
test <- dplyr::filter(plot$data, Plate == plates[i]) %>% dplyr::filter(Treatment %in% treatments)
View(test)
test <- dplyr::filter(plot$data, Plate == plates[i]) %>% dplyr::filter(Treatment %in% treatments) %>% dplyr::select(Treatment)
View(test)
treatsall <- ""
for(i in 1:length(plates))
{
treatplate <- dplyr::filter(plot$data, Plate == plates[i]) %>% dplyr::filter(Treatment %in% treatments) %>% dplyr::select(Treatment)
treatsall <- c(treatsall,treatplate)
}
treatsall
treatsall <- ""
for(i in 1:length(plates))
{
treatplate <- dplyr::filter(plot$data, Plate == plates[i]) %>% dplyr::filter(Treatment %in% treatments) %>% dplyr::select(Treatment)
treatsall <- c(treatsall,treatplate$Treatment)
}
treatsall
output <- NULL
output <- c(output,"1")
output
output <- NULL
for(i in 1:length(treatments))
{
if (sum(treatsall == treatments[i]) >= length(plates) )
{
output <- c(output, treatments[i])
}
}
output
plot$data
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
library(biomaRt)
handling <- useEnsembl(biomart = "hsapiens_gene_ensembl")
handling <- useEnsembl(dataset  = "hsapiens_gene_ensembl")
handling <- useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
listAttributes(handling)
View(listAttributes(handling))
mart <- useMart(biomart="ensembl",dataset = "hsapiens_gene_ensembl")
listAttributes(mart)
df <- mart <- useMart(biomart="ensembl",dataset = "mmusculus_gene_ensembl")
df
mart
df <- listAttributes(mart)
df
df[unique(df$name)]
df[unique(df$name),]
df[unique(df$name)]
unique(df$name)
df[unique(df$name),]
df[!duplicated(df$name),]
View(df)
df[!duplicated(df$name),]
!duplicated(df$name)
?reorder
cyl_table <- table(mtcars$cyl)
cyl_table
mtcars$cyl
tcars$cyl3 <- with(mtcars, reorder(cyl, cyl, function(x) -length(x)))
mtcars$cyl3 <- with(mtcars, reorder(cyl, cyl, function(x) -length(x)))
ggplot(mtcars, aes(cyl3)) + geom_bar()
library(ggplot2)
ggplot(mtcars, aes(cyl3)) + geom_bar()
mtcars$cyl3 <- with(mtcars, reorder(cyl, cyl, function(x) -x))
mtcars$cyl3 <- with(mtcars, reorder(cyl, cyl, function(x) x))
mtcars$cyl3 <- with(mtcars, reorder(cyl, cyl, function(x) sum(x))
ggplot(mtcars, aes(cyl3)) + geom_bar()
plot_luc_analysis_plot_rawdata_FLUC <- function(data = luc_file_data()$plot)
{
p <- ggplot(data, aes(x=Treatment, y=FLUC, fill=Treatment)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
labs(title = "FLUC", x = "Samples", y = "FLUC") +
ggplot2::theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size = rel(1.1)), legend.position="none")
return(p)
}
plot_luc_analysis_plot_rawdata_RLUC <- function(data = luc_file_data()$plot)
{
p <- ggplot(data, aes(x=Treatment, y=RLUC, fill=Treatment)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
labs(title = "RLUC", x = "Samples", y = "RLUC") +
ggplot2::theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size = rel(1.1)), legend.position="none")
return(p)
}
plot_luc_analysis_plot_rawdata_RATIO <- function(data = luc_file_data()$plot)
{
p <- ggplot(data, aes(x=Treatment, y=Divided, fill=Treatment)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
labs(title = "FLUC normalized by RLUC", x = "Samples", y = "Ratio FLUC/RLUC") +
ggplot2::theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size = rel(1.1)), legend.position="none")
return(p)
}
plot_luc_analysis_plot_rawdata_LOG2RATIO <- function(data = luc_file_data()$plot)
{
p <- ggplot(data, aes(x=Treatment, y=Log2, fill=Treatment)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ggplot2::theme_minimal() +
labs(title = "Log2 FLUC normalized by RLUC", x = "Samples", y = "Log2 Ratio FLUC/RLUC") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size = rel(1.1)), legend.position="none")
return(p)
}
plot_luc_analysis_plot_individual_FLUC <- function(data = luc_file_data()$plot, groups = NULL, calibrator = NULL, normalize = "none")
{
if(!is.null(groups))
{
if(!is.null(calibrator))
{
# calibrate to sample
# divide FLUC by the calibrator
data$FLUC <- data$FLUC/median(dplyr::filter(data, Treatment %in% calibrator)$FLUC, na.rm = TRUE)
data_cal <- dplyr::filter(data, Treatment %in% calibrator)
data <- dplyr::filter(data, Treatment %in% groups)
data <- dplyr::bind_rows(data, data_cal)
title  = paste("FLUC - Data calibrated to ", calibrator, sep="")
xlab = "Samples"
ylab = "Fold Change FLUC"
} else {
data <- dplyr::filter(data, Treatment %in% groups)
title  = "FLUC"
xlab = "Samples"
ylab = "FLUC"
}
p <- ggplot(data, aes(x=Treatment, y=FLUC, fill=Treatment)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
labs(title = title, x = xlab, y = ylab) +
ggplot2::theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size = rel(1.1)), legend.position="none")
return(p)
} else {
return("No Groups Selected")
}
}
plot_luc_analysis_plot_individual_RLUC <- function(data = luc_file_data()$plot, groups = NULL, calibrator = NULL, normalize = "none")
{
if(!is.null(groups))
{
if(!is.null(calibrator))
{
# calibrate to sample
# divide RLUC by the calibrator
data$RLUC <- data$RLUC/median(dplyr::filter(data, Treatment %in% calibrator)$RLUC, na.rm = TRUE)
data_cal <- dplyr::filter(data, Treatment %in% calibrator)
data <- dplyr::filter(data, Treatment %in% groups)
data <- dplyr::bind_rows(data, data_cal)
title  = paste("RLUC - Data calibrated to ", calibrator, sep="")
xlab = "Samples"
ylab = "Fold Change RLUC"
} else {
data <- dplyr::filter(data, Treatment %in% groups)
title  = "FLUC"
xlab = "Samples"
ylab = "RLUC"
}
p <- ggplot(data, aes(x=Treatment, y=RLUC, fill=Treatment)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
labs(title = title, x = xlab, y = ylab) +
ggplot2::theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size = rel(1.1)), legend.position="none")
return(p)
} else {
return("No Groups Selected")
}
}
plot_luc_analysis_plot_individual_RATIO <- function(data = luc_file_data()$plot, groups = NULL, calibrator = NULL, normalize = "none")
{
if(!is.null(groups))
{
if(!is.null(calibrator))
{
# calibrate to sample
# divide RATIO by the calibrator
data$Divided <- data$Divided/median(dplyr::filter(data, Treatment %in% calibrator)$Divided, na.rm = TRUE)
data_cal <- dplyr::filter(data, Treatment %in% calibrator)
data <- dplyr::filter(data, Treatment %in% groups)
data <- dplyr::bind_rows(data, data_cal)
title  = paste("Ratio - Data calibrated to ", calibrator, sep="")
xlab = "Samples"
ylab = "Fold Change Ratio FLUC/RLUC"
} else {
data <- dplyr::filter(data, Treatment %in% groups)
title  = "Ratio FLUC/RLUC"
xlab = "Samples"
ylab = "Ratio FLUC/RLUC"
}
p <- ggplot(data, aes(x=Treatment, y=Divided, fill=Treatment)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
labs(title = title, x = xlab, y = ylab) +
ggplot2::theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size = rel(1.1)), legend.position="none")
return(p)
} else {
return("No Groups Selected")
}
}
plot_luc_analysis_plot_individual_LOG2RATIO <- function(data = luc_file_data()$plot, groups = NULL, calibrator = NULL, normalize = "none")
{
if(!is.null(groups))
{
if(!is.null(calibrator))
{
# calibrate to sample
# divide FLUC by the calibrator
data$Log2 <- data$Log2/median(dplyr::filter(data, Treatment %in% calibrator)$Log2, na.rm = TRUE)
data_cal <- dplyr::filter(data, Treatment %in% calibrator)
data <- dplyr::filter(data, Treatment %in% groups)
data <- dplyr::bind_rows(data, data_cal)
title  = paste("Log2 FLUC normalized by RLUC - Data calibrated to ", calibrator, sep="")
xlab = "Samples"
ylab = "Fold Change Log2 Ratio FLUC/RLUC"
} else {
data <- dplyr::filter(data, Treatment %in% groups)
title  = "FLUC"
xlab = "Samples"
ylab = "Log2 Ratio FLUC/RLUC"
}
p <- ggplot(data, aes(x=Treatment, y=Log2, fill=Treatment)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
labs(title = title, x = xlab, y = ylab) +
ggplot2::theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size = rel(1.1)), legend.position="none")
return(p)
} else {
return("No Groups Selected")
}
}
mtcars$cyl3 <- with(mtcars, reorder(cyl, cyl, function(x) sum(x)))
ggplot(mtcars, aes(cyl3)) + geom_bar()
tt <- plot$data$Divided
tt <- plot$data
tt$FLUC <- with(tt, reorder(FLUC, FLUC, function(x) sum(x)))
ggplot(tt, aes(FLUC)) + geom_bar()
ggplot(tt[,c("FLUC")], aes(FLUC)) + geom_bar()
library(shiny)
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
getCt(qPCRraw)
