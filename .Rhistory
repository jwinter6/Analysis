runApp()
shiny::runApp('VAMBE')
path <- "/Users/janwinter/OneDrive/PhD/Followup/Results/Luciferase/Assays/2016-12-03_HEKTCF-HCT116_Luc-check/"
excel.sheet <- file.path(path,"2016-12-03_HEKTCF-HCT116.xlsx")
name <- "20161205_Hek293-HCT116"
normalize = FALSE
library(openxlsx)
library(reshape2)
library(dplyr)
library(highcharter)
# Get XLS File
knitr::opts_chunk$set(root.dir = path)
# Open XLSX File
## File is structured in the following way
## Worksheets:  Protocol (contains Aim, FLUC, RLUC, Treatment)
##              Sheet1 (Sheet2 etc.) containing the 96 well plate as plate format, 1-12 in rows A-H, which needs to be pared into a data frame
workbook <- openxlsx::loadWorkbook(excel.sheet,xlsxFile = NULL)
wb_names <- names(workbook)
# Get Protocol
protocols <- openxlsx::read.xlsx(xlsxFile = excel.sheet, sheet = "Protocol", colNames = FALSE, rowNames = FALSE)
protocol <- protocols[,2]
names(protocol) <- protocols[,1]
# Get Sheets
plates <- list()
groups <- NA
## check if multiple
for(i in 2:length(wb_names))
{
if(grepl(pattern = "Plate.+", x=wb_names[i]) )
{
plates[[wb_names[i]]]$layout <- as.data.frame(openxlsx::read.xlsx(xlsxFile = excel.sheet, sheet = wb_names[i], colNames = TRUE, rowNames = TRUE), stringsAsFactors=FALSE)
plates[[wb_names[i]]]$shape <- reshape2::melt(as.matrix(plates[[wb_names[i]]]$layout))
pattern <- expression("^(\\d{1})$")
plates[[wb_names[i]]]$shape$Var2 <- sub(pattern = pattern, replacement = paste("0","\\1", sep=""), x=  plates[[wb_names[i]]]$shape$Var2, fixed = FALSE )
plates[[wb_names[i]]]$shape$position <- paste0(plates[[wb_names[i]]]$shape$Var1, plates[[wb_names[i]]]$shape$Var2)
# set treatment groups
groups <- c(groups, as.character(plates[[wb_names[i]]]$shape$value))
}
}
# Now we make treatment groups in list
## They will be used for plotting later, NA are wells that will not be used for anything later on
groups <- unique(groups) # might be used later
# according to tidyverse, data will be kept like that:
## Column1: treatment
## Column2: FLUC signal
## Column3: RLUC signal
# We achieve this by loading the data, parsing the position as plate X at well A12 and putting it together with the treatment in the row.
# this rrequires that FLUC and RLUC signals of the same plate are in the same dataframe
data <- as.list(names(plates))
names(data) <- names(plates)
library(readr)
for(i in 1:length(data))
{
# FLUC
data[[i]]$FLUC <- readr::read_tsv(file = file.path(path,paste(name,"_",names(data)[i],"-FLUC.TXT", sep="")), col_names=FALSE, quoted_na = FALSE)
colnames(data[[i]]$FLUC) <- c("Plate", "Well", "FLUC")
data[[i]]$FLUC$Plate <- NULL
# RLUC
data[[i]]$RLUC <- readr::read_tsv(file = file.path(path,paste(name,"_",names(data)[i],"-RLUC.TXT", sep="")), col_names=FALSE, quoted_na = FALSE)
colnames(data[[i]]$RLUC) <- c("Plate", "Well", "RLUC")
data[[i]]$RLUC$Plate <- NULL
# Combine them in one
data[[i]]$ALL <- dplyr::inner_join(data[[i]]$FLUC, data[[i]]$RLUC, by="Well")
data[[i]]$ALL$Plate <- paste("Plate",i,sep="")
# Median normaliziation
if(normalize){
data[[i]]$ALL$FLUC <- data[[i]]$ALL$FLUC/ median(data[[i]]$ALL$FLUC, na.rm = TRUE)
data[[i]]$ALL$RLUC <- data[[i]]$ALL$RLUC/ median(data[[i]]$ALL$RLUC, na.rm = TRUE)
}
# Add the treatment to it
data[[i]]$ALL$Treatment <- sapply(data[[i]]$ALL$Well, function(x){
# Get treatment for same plate from plates$Plate1$[plates$Plate1$$position == x , "value"]
return(as.character(plates[[names(data)[i]]]$shape[plates[[names(data)[i]]]$shape$position == as.character(x),"value"]))
})
# Remove NA
data[[i]]$ALL <- dplyr::filter(data[[i]]$ALL, !is.na(Treatment))
# Create Platemap
data[[i]]$platemap <- dplyr::mutate(as.data.frame(data[[i]]$ALL),
Row=as.numeric(match(toupper(substr(Well, 1, 1)), LETTERS)),
Column=as.numeric(substr(Well, 2, 5)))
}
# Now we have all data in
# data$PLATEX#ALL in a row-based tidyverse compatible system
## Aim: Merge all to have a single tbl
plot <- list()
# store in plot$data
for(i in 1:length(data))
{
if(i==1)
{
# create tbl
plot$data <- tibble::tibble("Plate" = data[[i]]$ALL$Plate,
"Treatment" = data[[i]]$ALL$Treatment,
"FLUC" = data[[i]]$ALL$FLUC,
"RLUC" = data[[i]]$ALL$RLUC,
"Well" = data[[i]]$ALL$Well,
"FLUC.median" = NA,
"FLUC.mean" = NA,
"FLUC.sd" = NA,
"RLUC.median" = NA,
"RLUC.mean" = NA,
"RLUC.sd" = NA
)
}
else{
# Add rows of other datasets
plot$data <- dplyr::bind_rows(plot$data, data[[i]]$ALL[,c("Plate", "Treatment", "FLUC", "RLUC", "Well")])
}
}
## Normalize: FLUC / RLUC
plot$data$Divided <- plot$data$FLUC/plot$data$RLUC
## Transform to log2
plot$data$Log2 <- log2(plot$data$Divided)
# Transform Inf and -Inf to NA
plot$data$Divided <- sapply(plot$data$Divided, function(x){
if(is.infinite(x) || is.nan(x)){
return(NA)
} else {
return(x)
}
})
plot$data$Log2 <- sapply(plot$data$Log2, function(x){
if(is.infinite(x) || is.nan(x)){
return(NA)
} else {
return(x)
}
})
str(plot)
data <- plot$data
data
calibrator = "HEK_2000"
data$FLUC <- data$FLUC/median(data[data$Treatment %in% calibrator,"FLUC"],na.rm = TRUE)
data[data$Treatment %in% calibrator,"FLUC"]
data[data$Treatment %in% calibrator]$FLUC
data[data$Treatment %in% calibrator]
data$FLUC <- data$FLUC/dplyr::summarise(dplyr::filter(data, Treatment %in% calibrator), median)
dplyr::filter(data, Treatment %in% calibrator)
dplyr::filter(data, Treatment %in% calibrator)$FLUC
median(dplyr::filter(data, Treatment %in% calibrator)$FLUC, na.rm = TRUE)
data$FLUC <- data$FLUC/median(dplyr::filter(data, Treatment %in% calibrator)$FLUC, na.rm = TRUE)
data
data
data <- plot$data
data$FLUC <- data$FLUC/mean(dplyr::filter(data, Treatment %in% calibrator)$FLUC, na.rm = TRUE)
data
p <- ggplot(data, aes(x=Treatment, y=FLUC, fill=Treatment)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
labs(title = "FLUC", x = "Samples", y = "FLUC") +
ggplot2::theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size = rel(1.1)))
p
p <- ggplot(data, aes(x=Treatment, y=FLUC, fill=Treatment)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
labs(title = paste("FLUC - Data calibrated to ", calibrator, sep=""), x = "Samples", y = "FLUC") +
ggplot2::theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(size = rel(1.1)))
p
runApp('VAMBE')
runApp('VAMBE')
runApp('VAMBE')
?bind_rows
runApp('VAMBE')
runApp('VAMBE')
